■フリーフォーマットの文書から特定の文字列を抽出したい

一口にデータと言った場合、かならずしもカンマ区切りテキスト（CSV形式）やデータベースのような定型的（規則的）なデータばかりではありません。日常生活の中でなにげなく使っているのは、むしろ何の規則性もない非定型のデータである場合がほとんどでしょう。電子データ化が進んだ昨今、こうしたフリーフォーマットのデータからもデータを抽出したいというニーズは少なくありません。
本項では、こうした汎用文書からメールアドレスだけを検出し、一覧表示してみることにします。

●ポイント
　VBScript3.0の時代、文字列を検索をする場合には、InStr関数などを用いて指定された文字列にぴったり一致するものがあるかどうかを調べるくらいが関の山でした。
　しかし、VBScript5.0からは、正規表現オブジェクトRegExpが実装されました。正規表現はきわめて柔軟な文字列パターンを表現できるルールで、たとえばアルファベットだけを検出する、しかもOからWまでだけを検出といった曖昧な表現を簡潔に表現することができます。
　正規表現の仕様はそれだけで1冊の本になるくらいの多機能なものですが、根本的な思想自体は決してむずかしいものではありません。サンプルで基本的な考え方を学び、そして、リファレンスでパターン規則を調べながら、自分自身のニーズに応用していってみてください。

●サンプル
□reg.asp
1	<%@Language="VBScript" %>
2	<html>
3	<head>
4	<title>メールアドレスの抽出（結果表示）</title>
5	</head>
6	<body>
7	<h1>メールアドレスの抽出</h1>
8	<table border="1">
9	<tr>
10	　<th>検出行</th><th>検出桁</th><th>抽出文字列</th>
11	</tr>
12	<%
13	cnt=1
14	Set reg=New RegExp
#　正規表現（RegExp）オブジェクトを生成する場合には、Newキーワードを用います。
#　生成されたRegExpオブジェクトは、変数regに格納されます。
15	With reg
#　同じオブジェクトに対して繰り返し操作をおこなう場合、Withステートメントを用います。Withステートメントは、配下のブロック内で指定されたオブジェクトを略記することを許可します。
#　ただし、略記されるのはオブジェクト名のみで、プロパティやメソッドとの連結に用いる「.（ピリオド）」は省略できないので、注意してください。
16	　.Global=True
17	　.IgnoreCase=True
18	　.Pattern="[\w\.-]+(\+[\w-]*)?@([\w-]+\.)+[\w-]+"
#　Globalプロパティで全文検索をおこなうかどうかを、IgonoreCaseプロパティで大文字・小文字の差異を無視するかどうかを、Patternプロパティで検索用の正規表現パターンを、それぞれ指定します。
#　ここでは、大文字・小文字の差異を無視して全文検索をおこなうことにします。Patternプロパティの内容はメールアドレスパターンを示していますが、ここでは説明は割愛することにします。正規表現パターンについては、巻末のリファレンスを参照してください。
19	　Set fs=Server.CreateObject("Scripting.FileSystemObject")
#　FileSystemObjectオブジェクトを生成します。
20	　Set ts=fs.OpenTextFile(Server.MapPath("org.txt"),1)
#　抽出元のテキストファイルorg.txtを開きます。サンプルを試す際には、この部分のファイル指定をいろいろ変えて、抽出内容がどのように変わるかを見てみましょう。
21	　Do While Not ts.AtEndOfStream
#　1行ずつ繰り返し読みこんでいきます。
22	　　Set mchs=.Execute(ts.ReadLine)
#　読みこんだ内容を、16～18行目で設定した正規表現パターンで検索します。
#　検索結果は、Matchesコレクションmchsに格納されます。
23	　　For Each mch In mchs
24	　　　Response.Write "<tr>"
25	　　　Response.Write "<td>" & cnt & "行</td>"
26	　　　Response.Write "<td>" & mch.FirstIndex & "桁</td>"
27	　　　Response.Write "<td>" & mch.Value & "</td>"
28	　　　Response.Write "</tr>"
29	　　Next
#　Matchesコレクションから順にMatchオブジェクトを取り出し、マッチング結果を表示します。
#　MatchオブジェクトのFirstIndexプロパティはマッチした桁位置を、Valueプロパティは抽出された実際の文字列を返します。
30	　　cnt=cnt+1
31	　Loop
32	End With
33	%>
34	</body>
35	</html>

●TIPS
△バージョンアップの可能性
　正規表現パターンを入れ替えるだけで、このサンプルはさまざまなデータ抽出に応用することが可能です。たとえば、Patternプロパティの値を、
"(http://|https://){1}[\w\.\-/]+"
のように変更することで、URL文字列だけを抽出することができます。使い方によっては、複数のHTMLページから内部に含まれるURLをすべて抽出して、新たなリンクページを作成するといったようなことも考えられるでしょう。
